import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import jsPDF from 'jspdf';
import { ReservationService } from 'src/app/services/reservation/reservation.service';
import 'jspdf-autotable';
import { CustomerService } from 'src/app/services/customer/customer.service';
import { IResponse } from 'src/app/interface/IResponse';
import { showError } from 'src/app/utility/helper';
import { DriverService } from 'src/app/services/driver/driver.service';
import { DriverStatus } from 'src/app/enums/DriverStatus.enum';
import { IUser } from 'src/app/interface/IUser';
import { IDriver } from 'src/app/interface/IDriver';
import { ITrip } from 'src/app/interface/ITrip';
import * as moment from 'moment';
import { UserRoles } from 'src/app/enums/UserRoles.enum';

@UntilDestroy()
@Component({
  selector: 'app-reports',
  templateUrl: './reports.component.html',
  styleUrls: ['./reports.component.scss'],
})
export class ReportsComponent implements OnInit {
  protected UserRoles = UserRoles;
  protected paymentData: ITrip[] = [];

  protected displayedColumns: string[] = [
    'date',
    'driverName',
    'clientName',
    'clientStatus',
    'paymentTime',
    'amount',
    'actions',
  ];

  protected form: FormGroup;
  constructor(
    private fb: FormBuilder,
    private service: ReservationService,
    private customerService: CustomerService,
    private driverService: DriverService
  ) {
    this.form = this.fb.group({
      fromDate: [
        moment().subtract(1, 'months').format('YYYY-MM-DD'),
        Validators.required,
      ],
      toDate: [moment().format('YYYY-MM-DD'), Validators.required],
    });
  }

  ngOnInit(): void {
    this.submit();
  }

  submit() {
    const { fromDate, toDate } = this.form.value;
    this.service
      .reservationFilter(
        `${moment(fromDate).format('YYYY-MM-DD')} 00:00:00.000000`,
        `${moment(toDate).format('YYYY-MM-DD')} 23:59:59.999999`
      )
      .pipe(untilDestroyed(this))
      .subscribe({
        next: (res: IResponse) => {
          if (!res.data.length) {
            showError({
              title: 'Sorry, No Result Found',
              text: 'Adjust your filters and try again',
            });
            return;
          }

          this.paymentData = res.data;
        },
        error: () => {
          showError({
            title: 'System Error',
            text: 'Something Went Wrong',
          });
        },
      });
  }

  downloadCustomerReport() {
    this.customerService
      .getAllActiveUsers()
      .pipe(untilDestroyed(this))
      .subscribe({
        next: (res: IResponse) => {
          const doc = new jsPDF();

          // Add Header
          const pageWidth = doc.internal.pageSize.getWidth();
          doc.setFontSize(18);
          doc.text('All User Details', pageWidth / 2, 10, { align: 'center' });

          // Prepare table columns and rows
          const columns = [
            'ID',
            'Name',
            'Email',
            'Mobile Number',
            'Username',
            'Role',
            'Last Login',
            'Last Logout',
          ];
          const rows = res.data.map((user: IUser) => [
            user.id,
            user.name,
            user.email,
            user.mobileNumber,
            user.userName,
            user.role,
            new Date(user.lastLogInDate).toLocaleString(),
            new Date(user.lastLogOutDate).toLocaleString(),
          ]);

          // Generate the table
          (doc as any).autoTable({
            head: [columns],
            body: rows,
            startY: 30,
            margin: { top: 10, bottom: 20 },
          });

          // Add Footer
          const pageHeight = doc.internal.pageSize.getHeight();
          doc.setFontSize(10);
          doc.text('Generated by the System', pageWidth / 2, pageHeight - 10, {
            align: 'center',
          });

          // Save the PDF
          doc.save('user-details.pdf');
        },
        error: () => {
          showError({
            title: 'System Error',
            text: 'Something Went Wrong',
          });
        },
      });
  }

  downloadDriverReport() {
    this.driverService
      .getAllDrivers(DriverStatus.ALL)
      .pipe(untilDestroyed(this))
      .subscribe({
        next: (res: IResponse) => {
          const doc = new jsPDF();

          const pageWidth = doc.internal.pageSize.getWidth();
          doc.setFontSize(18);
          doc.text('All Driver Details', pageWidth / 2, 10, {
            align: 'center',
          });

          const columns = [
            'ID',
            'Name',
            'Email',
            'Mobile Number',
            'Status',
            'Last Login',
            'Last Logout',
          ];
          const rows = res.data.map((user: IDriver) => [
            user.id,
            user.name,
            user.email,
            user.mobileNumber,
            user.status,
            new Date(user.lastLogInDate).toLocaleString(),
            new Date(user.lastLogOutDate).toLocaleString(),
          ]);

          (doc as any).autoTable({
            head: [columns],
            body: rows,
            startY: 30,
            margin: { top: 10, bottom: 20 },
          });

          const pageHeight = doc.internal.pageSize.getHeight();
          doc.setFontSize(10);
          doc.text('Generated by the System', pageWidth / 2, pageHeight - 10, {
            align: 'center',
          });

          doc.save('driver-details.pdf');
        },
        error: () => {
          showError({
            title: 'System Error',
            text: 'Something Went Wrong',
          });
        },
      });
  }

  downloadPaymentReport(data: ITrip) {
    console.log(data);
    const doc = new jsPDF();

    const pageWidth = doc.internal.pageSize.getWidth();
    doc.setFontSize(18);
    doc.text('City Taxi', pageWidth / 2, 10, { align: 'center' });

    doc.setFontSize(12);
    doc.text('Payment Receipt', pageWidth / 2, 16, { align: 'center' });

    const template = [
      ['Reservation ID', data.id],
      ['Date', moment(data.reveredTime).format('YYYY-MM-DD HH:mm')],
      ['Driver Name', data.driverDto.name],
      ['Driver Mobile', data.driverDto.mobileNumber],
      ['Client Name', data.userDto.name],
      ['Client Mobile', data.userDto.mobileNumber],
      [
        'Client Status',
        data.userDto.userStatus === UserRoles.GUEST
          ? 'Guest User'
          : 'Registered User',
      ],
      ['Amount', `LKR ${data.paymentAmount}`],
      ['Client Review', data.ratingDto ? `${data.ratingDto.score}/5\n${data.ratingDto.review}`:'N/A'],
    ];

    (doc as any).autoTable({
      startY: 30, 
      head: [['Field', 'Value']],
      body: template,
      margin: { top: 10, bottom: 20 },
    });

    const pageHeight = doc.internal.pageSize.getHeight();
    doc.setFontSize(10);
    doc.text(
      'This is a system generated receipt',
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );

    doc.save(`payment_details-${data.id}.pdf`);
  }
}
